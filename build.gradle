import com.google.common.collect.Lists
import net.impactdev.gts.gradle.enums.ReleaseLevel
import net.impactdev.gts.gradle.tasks.PostToDiscord
import net.impactdev.gts.gradle.tasks.ReleaseNotesTask
import net.impactdev.gts.gradle.tasks.UploadToOre
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://repository.jboss.org/nexus/content/groups/public/"
        }
    }
    dependencies {
        classpath 'com.google.guava:guava:27.1-jre'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'ninja.miserable.blossom' version '1.0.1'
}

allprojects {
    group = 'me.nickimpact.gts'
    version = "6.1.1-SNAPSHOT"
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }

    task gitHash {
        def process = 'git rev-parse HEAD'.execute()
        process.waitFor()
        ext.commit = process.exitValue() ? 'Unknown' : process.text.trim().replace('\n', '')
    }

    task gitMessage {
        def process = 'git log -1 --format=%B'.execute()
        process.waitFor()
        ext.message = process.exitValue() ? 'Unknown' : process.text.trim()
    }

    task gitSinceLastRelease {
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            def set = 'git describe --tags'.execute()
            set.waitFor()

            ext.result = set.text.trim()

            if(ext.result.contains('-')) {
                ext.tag = ext.result.substring(0, ext.result.indexOf('-'))
            } else {
                ext.tag = ext.result
            }

            def read = 'git log '.concat(ext.tag).concat('..HEAD --oneline --no-abbrev-commit').execute()
            read.waitFor()
            ext.sinceLastRelease = read.exitValue() ? 'Unknown' : read.text.trim()
        } else {
            def process = 'git log $(git describe --tags --abbrev=0)..HEAD'.execute()
            process.waitFor()
            ext.sinceLastRelease = process.exitValue() ? 'Unknown' : process.text.trim()
        }
    }

    ext {
        sponge = "7.3.0"
        spigot = "1.12.2"

        run = ""
        if(System.getenv().containsKey("BUILD_NUMBER")) {
            run = "-${System.getenv("BUILD_NUMBER")}"
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'ninja.miserable.blossom'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    version = "${project.version}${project.ext.run}"

    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven { url = "https://repo.aikar.co/content/groups/aikar/" }
        maven {
            name = "Impact-Dev"
            url = "https://maven.impactdev.net/repository/development/"
        }
        maven {
            name = 'sonatype-oss'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    jar {
        exclude 'Impactor*.jar'
    }

    shadowJar {
        exclude 'Impactor*.jar'
    }

    dependencies {
        shadow "net.impactdev.impactor:api:3.1.2"
        shadow 'com.google.guava:guava:27.1-jre'
        shadow 'com.google.code.gson:gson:2.8.0'
        shadow 'com.github.ben-manes.caffeine:caffeine:2.8.2'
        shadow group: 'org.mariuszgromada.math', name: 'MathParser.org-mXparser', version: '4.4.2'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'com.google.guava:guava:27.1-jre'
        testCompile group: 'org.mariuszgromada.math', name: 'MathParser.org-mXparser', version: '4.4.2'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        dependsOn shadowJar
    }

    artifacts {
        archives javadocJar
    }

}

task genChangelog(type: ReleaseNotesTask) {
    dependsOn(gitHash)
    dependsOn(gitMessage)
    version = project.version
    hash = gitHash.ext.commit
    sponge = project.ext.sponge
    message = gitMessage.ext.message
    sinceLastRelease = gitSinceLastRelease.ext.sinceLastRelease
    level = ReleaseLevel.get(version)
}

task writeChangelogToFile {
    dependsOn(genChangelog)
    doLast {
        java.nio.file.Path path = project.projectDir.toPath().resolve("$buildDir").resolve("allJars").resolve("${project.version}.md")
        if(!Files.exists(path)) {
            Files.createDirectories(path.getParent())
            Files.createFile(path)
        }

        Files.write(path, genChangelog.result.getBytes(StandardCharsets.UTF_8))
    }
}

task copyJars(type: Copy) {
    dependsOn subprojects.build
    dependsOn writeChangelogToFile
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/allJars"
    exclude '*-all.jar'
    exclude '*-sources.jar'
    exclude 'api*.jar'
    exclude 'common*.jar'
    exclude 'spigot*.jar'
    exclude 'sponge*.jar'
    exclude 'plugin*.jar'
    exclude 'reforged*.jar'
    exclude 'gens*.jar'
    exclude 'generations*.jar'
    exclude 'bungee*.jar'
    exclude 'pixelmon*.jar'
    exclude 'velocity*.jar'
}

task uploadToOre(type: UploadToOre) {
    dependsOn(genChangelog)
    dependsOn(copyJars)

    notes = { genChangelog.result } as Provider<String>
    level = genChangelog.level
    file = new File(this.getProjectDir(), Paths.get("build", "allJars", "GTS-Sponge-${project.version}.jar").toString())
    pluginID = "gts"
    apiKey = project.properties['ore_api_key']?.toString() ?: System.getenv("ORE_API_KEY")
}

task sendToDiscordPlugins(type: PostToDiscord) {
    dependsOn(copyJars)

    webhookID = project.properties['discord_webhook_id_plugin']?.toString() ?: System.getenv("DISCORD_WEBHOOK_ID_PLUGIN")
    webhookToken = project.properties['discord_webhook_token_plugin']?.toString() ?: System.getenv("DISCORD_WEBHOOK_TOKEN_PLUGIN")
    memberRole = project.properties['discord_member_id']?.toString() ?: System.getenv("DISCORD_WEBHOOK_MEMBER_ROLE")

    content = "GTS {{content:version}} is now available!"
    version = project.version
    level = ReleaseLevel.get(version)
    files = Lists.newArrayList(
            new File(this.getProjectDir(), Paths.get("build", "allJars", "GTS-Sponge-${project.version}.jar").toString()),
            new File(this.getProjectDir(), Paths.get("build", "allJars", "GTS-Bungee-${project.version}.jar").toString()),
            new File(this.getProjectDir(), Paths.get("build", "allJars", "GTS-Velocity-${project.version}.jar").toString())
    )
    force = true
}

task sendToDiscordReforgedExtension(type: PostToDiscord) {
    dependsOn(copyJars)

    webhookID = project.properties['discord_webhook_id_reforged']?.toString() ?: System.getenv("DISCORD_WEBHOOK_ID_REFORGED")
    webhookToken = project.properties['discord_webhook_token_reforged']?.toString() ?: System.getenv("DISCORD_WEBHOOK_TOKEN_REFORGED")
    memberRole = project.properties['discord_member_id']?.toString() ?: System.getenv("DISCORD_WEBHOOK_MEMBER_ROLE")

    content = "GTS Extension {{content:version}} for Reforged is now available!"
    version = project.version
    level = ReleaseLevel.get(version)
    files = Lists.newArrayList(
            new File(this.getProjectDir(), Paths.get("build", "allJars", "GTS-Extension-Reforged-${project.version}.jar").toString())
    )
    force = true
}

task sendToDiscordGenerationsExtension(type: PostToDiscord) {
    dependsOn(copyJars)

    webhookID = project.properties['discord_webhook_id_generations']?.toString() ?: System.getenv("DISCORD_WEBHOOK_ID_GENERATIONS")
    webhookToken = project.properties['discord_webhook_token_generations']?.toString() ?: System.getenv("DISCORD_WEBHOOK_TOKEN_GENERATIONS")
    memberRole = project.properties['discord_member_id']?.toString() ?: System.getenv("DISCORD_WEBHOOK_MEMBER_ROLE")

    content = "GTS Extension {{content:version}} for Generations is now available!"
    version = project.version
    level = ReleaseLevel.get(version)
    files = Lists.newArrayList(
            new File(this.getProjectDir(), Paths.get("build", "allJars", "GTS-Extension-Generations-${project.version}.jar").toString())
    )
    force = true
}

task deploy {
    dependsOn(uploadToOre)
    dependsOn(sendToDiscordPlugins)
    dependsOn(sendToDiscordReforgedExtension)
    dependsOn(sendToDiscordGenerationsExtension)
}

apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'

publishing {
    repositories {
        maven {
            name = "ImpactDev-Public"
            url = "https://maven.impactdev.net/repository/development/"
            credentials {
                username System.getenv('NEXUS_USER')
                password System.getenv('NEXUS_PW')
            }
        }
    }

    publications {
        api(MavenPublication) {
            def project = project(':api')
            from project.components.java
            groupId project.group
            artifactId "api"
            version project.version
        }

        common(MavenPublication) {
            def project = project(':common')
            from project.components.java
            groupId project.group
            artifactId "common"
            version project.version
        }

        bungee(MavenPublication) {
            def project = project(':bungee')
            from project.components.java
            groupId project.group
            artifactId "bungee"
            version project.version
        }

        velocity(MavenPublication) {
            def project = project(':velocity')
            from project.components.java
            groupId project.group
            artifactId "velocity"
            version project.version
        }

        sponge_common(MavenPublication) {
            def project = project(':sponge-common')
            from project.components.java
            groupId project.group
            artifactId "sponge-common"
            version project.version
        }

        plugin_sponge(MavenPublication) {
            def project = project(':plugin:sponge')
            from project.components.java
            groupId project.group
            artifactId "plugin-sponge"
            version project.version
        }

        reforged_sponge(MavenPublication) {
            def project = project(':pixelmon:reforged:sponge')
            from project.components.java
            groupId project.group
            artifactId "reforged-sponge"
            version project.version
        }

        generations_sponge(MavenPublication) {
            def project = project(':pixelmon:generations:sponge')
            from project.components.java
            groupId project.group
            artifactId "generations-sponge"
            version project.version
        }
    }
}

build.dependsOn shadowJar
build.dependsOn copyJars